//: [Previous](@previous)

import Combine
import Dispatch

let subj1 = PassthroughSubject<Int, Never>()

let c1 = subj
    .subscribe(on: DispatchQueue.global())
    .sink { value in
        print(value)
    }

subj1.send(14)
subj1.send(15)
subj1.send(16)

let subj = PassthroughSubject<Int, Never>()

let c = subj
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .subscribe(on: DispatchQueue.global())
    .sink { value in
        print(value)
    }

subj.send(14)
subj.send(15)
subj.send(16)

//: [Next](@next)
